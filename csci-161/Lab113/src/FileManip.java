import java.io.*;
import java.nio.*;
import java.util.*;

/**
 *
 * @author joey
 */
public class FileManip {
    public static String file_prefix = "/tmp/";
    private static Random rand = new Random();
    
    /**
     * @param filename
     * @param arr
     * @throws IOException 
     * Write ASCII representation of integers to file
     */
    public static void writeAsciiToFile(String filename, int[] arr)
            throws IOException {
        PrintWriter pw = 
            new PrintWriter(
                new BufferedWriter( 
                    new FileWriter(
                        new File(file_prefix + filename)))); // ... so many allocations
    
        for(int i : arr)
            pw.println(i);
        
        pw.close();
    }
    
    /**
     * @param sl linked list of strings representing filenames
     * @throws FileNotFoundException
     * @throws IOException 
     * print the first 10 binary integers in the file
     * prefixing each group with the filename
     */
    public static void printStringsFromFiles(StringList sl)
            throws FileNotFoundException, IOException {
        for(int i = 0; i < sl.getSize(); i++) {
            DataInputStream dis = openFileForInput(sl.at(i));
            System.out.println(sl.at(i));
            
            for(int j = 0; j < 10; j++)
                System.out.println(dis.readInt());
        }
    }
    
    /**
     * @param filename base filename, others are derived from this one
     * @param num_files number of files to split random numbers into
     * @param num_integers number of random numbers to generate
     * @return linked list of Strings
     * @throws java.io.FileNotFoundException
     */
    public static StringList generateRandomNumberFileGroup(
            String filename, 
            int num_files, 
            int num_integers) throws FileNotFoundException, IOException {
        
        if(num_integers % num_files != 0) 
            throw new IllegalArgumentException("num_integers needs to be evenly divisible by num_files");
        
        int numbers_per_file = num_integers / num_files;
        StringList sl = new StringList();
        
        for(int i = 0; i < num_files; i++) {
            String file = filename + i;
            sl.addString(file);
            // the + i is how unique names are generated for each file
            generateRandomNumberFile(file, numbers_per_file); 
        }
        
        return sl;
    }
    
    /**
     * @param filename
     * @param arr
     * @throws FileNotFoundException
     * @throws IOException
     * Writes the contents of arr to file given by filename
     * current contents are overwritten
     */
    public static void writeBinaryToFile(String filename, int[] arr)
            throws FileNotFoundException, IOException {
        FileOutputStream fos = new FileOutputStream(file_prefix + filename);
        for(int i = 0; i < arr.length; i++)
            fos.write(ByteBuffer.allocate(4).putInt(arr[i]).array());
    }
    
    /**
     * @param filename
     * pretty self-explanatory delete a file
     * Wrapper over the File operations in Java
     */
    public static void deleteFile(String filename) {
        File file = new File(file_prefix + filename);
        file.delete();
    }
    
    /**
     * @param oldfilename
     * @param newfilename 
     * rename file, deleting existing file if needed
     */
    public static void renameFile(String oldfilename, String newfilename) {
        File file = new File(file_prefix + newfilename);
        if(file.exists())
            file.delete(); // delete file if it exists
        
        File newfile = new File(file_prefix + oldfilename);
        newfile.renameTo(file);
    }
    /**
     * @param filename
     * @throws FileNotFoundException
     * @throws IOException
     * Generate a file with easy-to-read ASCII values
     * instead of raw binary values
     */
    public static void convertBinaryToAscii(String filename)
            throws FileNotFoundException, IOException {
        DataInputStream dis  = openFileForInput(filename);
        
        // filename generated by button mashing the keyboard
        String temp_file_name = "djd84j47ry47ehd78fh38dj";
        
        PrintWriter pw = 
            new PrintWriter(
                new BufferedWriter( 
                    new FileWriter(
                        new File(file_prefix + temp_file_name))));
        
        while(dis.available() > 0)
            pw.println(dis.readInt());
        
        dis.close();
        pw.close();
        
        // original file gets replaced
        renameFile(temp_file_name, filename);
    }
    
    /**
     * @param filename create file with this name
     * @param n number of random numbers to generate
     * @throws java.io.FileNotFoundException
     * Create file and fill with random numbers
     */
    public static void generateRandomNumberFile(String filename, int n) 
            throws FileNotFoundException, IOException {
        FileOutputStream fos = new FileOutputStream(file_prefix + filename);
        for(int i = 0; i < n; i++)
            fos.write(ByteBuffer.allocate(4).putInt(rand.nextInt()).array()); // fill with random numbers
    }
    
    /**
     * @param filename file to read data from
     * @return integer array containing data from file
     * @throws FileNotFoundException 
     * read in an entire file of binary integer data
     */
    public static int[] getArray(String filename)
            throws FileNotFoundException, IOException {
        
        File file = new File(file_prefix + filename);
        int nInts = ((int)file.length()) / 4; // number of 4-byte integers
        
        int[] iArr = new int[nInts];
        
        DataInputStream input = 
                new DataInputStream(
                        new BufferedInputStream(
                                new FileInputStream(file_prefix + filename)));
        
        for(int i = 0; i < nInts; i++)
            iArr[i] = input.readInt();
        
        return iArr;
    }
    
    /**
     * @param filename
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     * A wrapper over the FileOutputStream operations in Java
     */
    public static FileOutputStream openFileForOutput(String filename) 
            throws FileNotFoundException, IOException {
        FileOutputStream fos = new FileOutputStream(file_prefix + filename);
        return fos;
    }
    
    /**
     * @param filename
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     * A wrapper over the DataInputStream operations in Java
     */
    public static DataInputStream openFileForInput(String filename) 
            throws FileNotFoundException, IOException {
        DataInputStream input = 
                new DataInputStream(
                        new BufferedInputStream(
                                new FileInputStream(file_prefix + filename)));
        
        return input;
    }
    
}
